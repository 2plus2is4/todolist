{"version":3,"sources":["todos.js","addTodo.js","App.js","serviceWorker.js","index.js"],"names":["todos","_ref","Todos","deleteTodo","todosList","length","map","todo","react_default","a","createElement","className","key","id","onClick","href","addTodo","state","submitted","e","preventDefault","_this","props","added","setState","changed","Object","defineProperty","target","value","onSubmit","this","onChange","type","React","Component","App","tasks","show","src_addTodo","finished","clicked","newList","filter","newfinished","concat","toConsumableArray","console","log","Math","random","switched","src_todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f37ee93.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\n\r\nfunction todos({ Todos,deleteTodo }) {\r\n    \r\n    const todosList = Todos.length ? (Todos.map(todo => {\r\n        return (\r\n            <div className=\"collection-item\" key={todo.id} onClick={() => { deleteTodo(todo.id) }}> \r\n                <a href=\"#!\" className=\"collection-item\" id=\"imtodo\">{todo.todo}</a>\r\n                {/* <span className=\"hoverable-SELECT\">{todo.todo}</span> */}\r\n            </div>\r\n        )\r\n    })): (<p className=\"center\">u free :O</p>);\r\n\r\n\r\n    return (\r\n        <div className=\"collection\">\r\n            {todosList}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default todos;","import React from 'react';\r\n\r\nclass addTodo extends React.Component{\r\n\r\n    state = {\r\n        todo:''\r\n    }\r\n\r\n    submitted = (e) => {\r\n        e.preventDefault();\r\n        this.props.added(this.state);\r\n        this.setState({\r\n            todo:''\r\n        })\r\n    }\r\n\r\n    changed = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.submitted}>\r\n                <input className=\"input-field col-s2\" id=\"todo\" onChange={this.changed} value={this.state.todo}/>\r\n                <button className=\"btn waves-effect waves-light col s12\" type=\"submit\">Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default addTodo;","import React from 'react';\nimport Todos from './todos';\nimport AddTodo from './addTodo';\n\nclass App extends React.Component {\n\n  state = {\n    tasks: [\n      { id: 1, todo: \"dont click me\" },\n      { id: 2, todo: \"clean tour room ffs\" }\n    ],\n    show: [(<AddTodo added={this.added} />)],\n    finished: [\n\n    ]\n  }\n\n  clicked = (id) => {\n    let newList = this.state.tasks.filter(todo => {\n      return todo.id !== id\n    });\n\n    let newfinished = this.state.tasks.filter(todo => {\n      return todo.id === id\n    });\n    newfinished = [...this.state.finished, newfinished];\n\n    this.setState({\n      tasks: newList,\n      finished: newfinished\n    });\n\n    console.log(this.state);\n    \n  }\n\n  added = (todo) => {\n    console.log(todo);\n    if (todo.todo === '') return;\n    todo.id = Math.random();\n    let todos = [...this.state.tasks, todo];\n    console.log(todos);\n    this.setState({\n      tasks: todos,\n    });\n  }\n\n  switched = (e) => {\n    console.log(e.target.id);\n    this.setState({\n      show: e.target.id === \"list\" ? [(<AddTodo added={this.added} />),(<Todos Todos={this.state.tasks} deleteTodo={this.clicked} />)]\n        : null\n     })\n  }\n\n  render() {\n    return (\n      <div className=\"todo-app container\">\n        <h1 className=\"center blue-text\">Your TODOs</h1>\n\n        {/* <div className=\"row\">\n          <div className=\"col s12\">\n            <ul className=\"tabs\">\n              <li className=\"tab col s6\" onClick={this.switched}><a className=\"active\" href=\"#test2\"  id=\"list\">Todos</a></li>\n              <li className=\"tab col s6\" onClick={this.switched}><a href=\"#test4\" id=\"complete\">Completed</a></li>\n            </ul>\n          </div>\n        </div> */}\n\n        <AddTodo added={this.added} />\n        <Todos Todos={this.state.tasks} deleteTodo={this.clicked}/>\n        {/* {this.state.show} */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}